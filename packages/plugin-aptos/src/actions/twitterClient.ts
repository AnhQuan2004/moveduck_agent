import dotenv from "dotenv";
import { Scraper } from "agent-twitter-client";

// Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
dotenv.config();

// Kh·ªüi t·∫°o Scraper
const scraper = new Scraper();

let accountLoggedIn = false;

// H√†m ƒëƒÉng nh·∫≠p Twitter
const login = async () => {
  console.log("üü† ƒêang ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n...");
  await scraper.login(
    process.env.TWITTER_USERNAME || "",
    process.env.TWITTER_PASSWORD || ""
  );
  console.log("üü¢ ƒê√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng!");
  accountLoggedIn = true;
};

// H√†m l·∫•y tweet theo ID
export const getTweetById = async (tweetId: string) => {
  if (!accountLoggedIn) await login();

  try {
    const tweet = await scraper.getTweet(tweetId);
    console.log("üîπ Tweet l·∫•y ƒë∆∞·ª£c:", tweet);
    return tweet;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y tweet:", error);
    throw error;
  }
};

// H√†m l·∫•y t·∫•t c·∫£ tweet c·ªßa m·ªôt user
export const getTweetsByUser = async (username: string, count: number = 5) => {
  if (!accountLoggedIn) await login();

  try {
    const tweets = await scraper.getTweets(username, count);
    console.log(`üîπ ${count} tweet g·∫ßn ƒë√¢y c·ªßa ${username}:`, tweets);
    return tweets;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y tweet:", error);
    throw error;
  }
};

// H√†m ƒëƒÉng m·ªôt tweet m·ªõi
export const postTweet = async (content: string) => {
  if (!accountLoggedIn) await login();

  try {
    await scraper.sendTweet(content);
    console.log("‚úÖ ƒê√£ ƒëƒÉng tweet:", content);
  } catch (error) {
    console.error("‚ùå L·ªói khi ƒëƒÉng tweet:", error);
    throw error;
  }
};

// H√†m l·∫•y tweet m·ªõi nh·∫•t c·ªßa m·ªôt t√†i kho·∫£n
export const getLatestTweet = async (username: string) => {
  if (!accountLoggedIn) await login();

  try {
    const latestTweet = await scraper.getLatestTweet(username);
    console.log("üîπ Tweet m·ªõi nh·∫•t:", latestTweet);
    return latestTweet;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y tweet m·ªõi nh·∫•t:", error);
    throw error;
  }
};
